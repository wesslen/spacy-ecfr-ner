title: "NER on ECFR Banking Regulation in a new pipeline (Named Entity Recognition)"
description: "Custom NER project for spaCy v3 adapted from the spaCy v3 [`ner_demo`](https://github.com/explosion/projects/tree/9d5fce5f95ddf5f35c3370b2074b25e995525f51/pipelines/ner_demo) example script for creating an NER component in a new pipeline."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  lang: "en"
  senter_train: "senter_train.jsonl" 
  senter_valid: "senter_valid.jsonl" 
  ner_train: "ner_train.jsonl" 
  ner_valid: "ner_valid.jsonl" 
  version: "0.0.1"
  # Set your GPU ID, -1 is CPU
  gpu_id: -1
  # Vectors model for train-with-vectors
  vectors_model: "en_core_web_md"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "corpus", "configs", "training", "scripts", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded.
assets:
  - dest: ${vars.ner_train}
    description: "NER training examples"
  - dest: ${vars.ner_valid}
    description: "NER validation examples"
  - dest: ${vars.senter_train}
    description: "Senter training examples"
  - dest: ${vars.senter_valid}
    description: "Senter validation examples"
  - dest: "assets/patterns.jsonl"
    description: "Patterns for sections, cites, and laws for NER training"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - download
    - partition
    - convert
    - train-senter
    - train-ner
    # - train-with-vectors
    - evaluate

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "download"
    help: "Download a spaCy model with pretrained vectors"
    script:
      - "python -m spacy download ${vars.vectors_model}"

  - name: "partition"
    help: "Partition annotations to train vs validation splits"
    script:
      - "python scripts/partition.py assets/ecfr_ner.jsonl assets/${vars.ner_train} assets/${vars.ner_valid}"
      - "python scripts/partition.py assets/ecfr_sents.jsonl assets/${vars.senter_train} assets/${vars.senter_valid}"

  - name: "convert"
    help: "Convert data to spaCy's binary format"
    script:
      - "python scripts/convert_ner.py ${vars.lang} assets/${vars.ner_train} corpus/ner_train.spacy"
      - "python scripts/convert_ner.py ${vars.lang} assets/${vars.ner_valid} corpus/ner_valid.spacy"
    deps:
      - "assets/${vars.ner_train}"
      - "assets/${vars.ner_valid}"
      - "scripts/convert_ner.py"
    outputs:
      - "corpus/ner_train.spacy"
      - "corpus/ner_valid.spacy"

  - name: "train-senter"
    help: "Train a custom sentence/parser for ECFR"
    script:
      - "prodigy train senter --senter ecfr_labeled_sents"

  - name: "train-ner"
    help: "Train the NER model"
    script:
      - "python -m spacy train configs/config.cfg --output training/ --paths.train corpus/ner_train.spacy --paths.dev corpus/ner_valid.spacy --training.eval_frequency 10 --training.patience 50 --gpu-id ${vars.gpu_id} --initialize.vectors ${vars.vectors_model} --components.tok2vec.model.embed.include_static_vectors true"
    deps:
      - "configs/config.cfg"
      - "corpus/ner_train.spacy"
      - "corpus/ner_valid.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/ner_valid.spacy --output training/metrics.json"
    deps:
      - "corpus/ner_valid.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  # - name: package
  #   help: "Package the trained model as a pip package"
  #   script:
  #     - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
  #   deps:
  #     - "training/model-best"
  #   outputs_no_cache:
  #     - "packages/${vars.lang}_${vars.name}-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"

  - name: visualize-model
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/model-best \"(B) For purposes of paragraph (c)(11)(ii)(A) of this section, the netting set must be divided into sub-netting sets as follows:,\""
    deps:
      - "scripts/visualize_model.py"
      - "training/model-best"
